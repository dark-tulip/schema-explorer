version: '3.8'
services:

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"  # рort к интерфейсу
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka-1:19092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: debezium-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://debezium-connect:8083
      KAFKA_CLUSTERS_0_KAFKACONNECT_1_NAME: mongo-sink-connector
      KAFKA_CLUSTERS_0_KAFKACONNECT_1_ADDRESS: http://mongo-sink-connector:8084
      KAFKA_CLUSTERS_0_KAFKACONNECT_2_NAME: pg-sink
      KAFKA_CLUSTERS_0_KAFKACONNECT_2_ADDRESS: http://pg-sink:8085
    depends_on:
      - kafka-1
      - debezium-connect

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
    ports:
      - "2181:2181"

  kafka-1:
    image: confluentinc/cp-kafka:7.2.1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Вернуть 3 для трех брокеров по дефолту
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
    depends_on:
      - zookeeper

  #  kafka-2:
  #    image: confluentinc/cp-kafka:7.2.1
  #    ports:
  #      - "9093:9093"
  #      - "29093:29093"
  #    environment:
  #      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
  #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
  #      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #      KAFKA_BROKER_ID: 2
  #    depends_on:
  #      - zookeeper
  #
  #  kafka-3:
  #    image: confluentinc/cp-kafka:7.2.1
  #    ports:
  #      - "9094:9094"
  #      - "29094:29094"
  #    environment:
  #      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
  #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
  #      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #      KAFKA_BROKER_ID: 3
  #    depends_on:
  #      - zookeeper

  postgres:
    image: postgres:15
    container_name: local_postgres
    environment:
      # system db init properties
      POSTGRES_DB: internaldb
      POSTGRES_USER: internal_usr
      POSTGRES_PASSWORD: internalusrpwd
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # создаем несколько тестовых БД c пользователями
    command: # Необходимое условие для CDC Debezium
      - "postgres"
      - "-c"
      - "wal_level=logical"  # https://debezium.io/documentation/reference/stable/connectors/postgresql.html#:~:text=Configuring%20the%20PostgreSQL-,server,-If%20you%20are

  debezium-connect:
    image: debezium/connect:2.7.0.Final
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: "kafka-1:19092"  # "kafka-1:19092,kafka-2:19093,kafka-3:19094"
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: "connect-configs"
      OFFSET_STORAGE_TOPIC: "connect-offsets"
      STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_PLUGIN_PATH: "/kafka/connect,/usr/share/java"
    depends_on:
      - kafka-1
      - postgres
    volumes:
      - ./kafka-connectors:/usr/share/java

  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    command: [ "start-dev", "--http-port", "7080"]
    ports:
      - "7080:7080"
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 7080
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloakdb
      DB_SCHEMA: public
      DB_USER: keycloakuser
      DB_PASSWORD: keycloakpass
    depends_on:
      - postgres

#  clickhouse:
#    image: clickhouse/clickhouse-server:23.8
#    container_name: clickhouse
#    restart: always
#    ports:
#      - "8123:8123"  # HTTP-интерфейс
#      - "9000:9000"  # TCP-интерфейс
#    environment:
#      CLICKHOUSE_DB: testdb
#      CLICKHOUSE_USER: clickuser
#      CLICKHOUSE_PASSWORD: clickpass
#    volumes:
#      - clickhouse_data:/var/lib/clickhouse
#    ulimits:
#      nofile:
#        soft: 262144
#        hard: 262144
#    depends_on:
#      - kafka-1

  # MongoDB Service
  mongodb:
    image: mongo:6
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    command: ["mongod", "--replSet", "rs0", "--keyFile", "/etc/mongo-keyfile"]
    volumes:
      - mongodb_data:/data/db
      - ./mongo-keyfile:/etc/mongo-keyfile:ro

  mongo-init-replica:
    image: mongo:6
    depends_on:
      - mongodb
    restart: "no"
    entrypoint: >
      bash -c "
        sleep 5;
        mongosh --host mongodb:27017 -u root -p example --authenticationDatabase admin --eval '
          rs.initiate({
            _id: \"rs0\",
            members: [{ _id: 0, host: \"mongodb:27017\" }]
          })
        '
      "

volumes:
  postgres_data:
  clickhouse_data:
  mongodb_data:

